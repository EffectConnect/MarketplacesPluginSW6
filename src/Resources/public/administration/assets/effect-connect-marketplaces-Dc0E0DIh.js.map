{"version":3,"file":"effect-connect-marketplaces-Dc0E0DIh.js","sources":["../../../app/administration/src/helper/functions.js","../../../app/administration/src/module/effectconnect-module/index.js","../../../app/administration/src/module/effectconnect-connection/page/effectconnect-connection-overview.twig","../../../app/administration/src/module/effectconnect-connection/page/effectconnect-connection-overview.js","../../../app/administration/src/module/effectconnect-connection/page/effectconnect-connection-edit.twig","../../../app/administration/src/module/effectconnect-connection/page/effectconnect-connection-edit.js","../../../app/administration/src/module/effectconnect-connection/index.js","../../../app/administration/src/module/effectconnect-log/page/effectconnect-log-overview.twig","../../../app/administration/src/module/effectconnect-log/page/effectconnect-log-overview.js","../../../app/administration/src/module/effectconnect-log/index.js","../../../app/administration/src/core/service/effectconnect-api-service.js","../../../app/administration/src/core/service/effectconnect-connection-service.js","../../../app/administration/src/core/service/effectconnect-task-service.js","../../../app/administration/src/core/service/effectconnect-log-service.js","../../../app/administration/src/core/service/main.js","../../../app/administration/src/main.js"],"sourcesContent":["\nfunction _versionToFloat(version) {\n    version = version.replace(/\\D/g,'');\n    return parseFloat(version.substring(0, 1) + \".\" + version.substring(1, version.length));\n}\n\nexport function versionIsBefore(version) {\n    const swVersion = _versionToFloat(Shopware.Context.app.config.version);\n    return swVersion < version;\n}","import {versionIsBefore} from '../../helper/functions';\nimport nlNL from './snippet/nl-NL';\nimport enGB from './snippet/en-GB';\n\nlet nav = {\n    id: 'effectconnect-module',\n    label: 'EffectConnect',\n    color: '#ff3d58',\n    icon: 'default-shopping-paper-bag-product',\n    parent: 'sw-extension',\n    position: 100\n};\n\nif (versionIsBefore(6.4)) {\n    delete nav.parent;\n}\n\nShopware.Module.register('effectconnect-module', {\n    type: 'plugin',\n    name: 'effectconnect-module',\n    title: 'EffectConnect',\n    description: 'EffectConnect module',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'default-action-settings',\n    entity: 'integration',\n\n    snippets: {\n        'nl-NL': nlNL,\n        'en-GB': enGB\n    },\n\n    routes: {\n        dummy: {\n            component: { template: '' },\n            path: 'effectconnect.log',\n        }\n    },\n\n    navigation: [nav]\n});","{% block connection_overview %}\n    <sw-page class=\"connection-overview-list\">\n        <template #smart-bar-actions>\n            <sw-button variant=\"success\" :router-link=\"{ name: 'effectconnect.connection.create'}\">\n                {{ $tc('ec.global.create') }}\n            </sw-button>\n        </template>\n        <template v-slot:content>\n            <sw-alert variant=\"error\" appearance=\"system\" :showIcon=\"true\" :closable=\"false\" v-if=\"error\">\n                {{ error }}\n            </sw-alert>\n            <div>\n                <sw-data-grid :dataSource=\"connections\" :columns=\"columns\" :showSelection=\"false\">\n                    <template v-slot:actions=\"{ item }\">\n                        <sw-context-menu-item :router-link=\"{ name: 'effectconnect.connection.edit', params: { id: item.id } }\">\n                            {{ $tc('ec.global.edit') }}\n                        </sw-context-menu-item>\n                        <sw-context-menu-item variant=\"danger\" @click=\"showDeleteModal(item)\">\n                            {{ tc('deleteConnection') }}\n                        </sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n            </div>\n            <sw-modal v-if=\"showModal\" @modal-close=\"closeModal()\">\n                {% block ec_detail_settings_options_delete_modal_confirmtext %}\n                    <p>{{ tc('textConfirmDelete') }}</p>\n                    <p><strong>{{ selectedItem.name }}</strong></p>\n                    <p>{{ tc('textDeleteInfo') }}</p>\n                {% endblock %}\n                <template #modal-footer>\n                    <sw-button size=\"small\" @click=\"closeDeleteModal\">\n                        {{ $tc('ec.global.cancel') }}\n                    </sw-button>\n                    <sw-button size=\"small\" variant=\"danger\" @click=\"deleteItem(selectedItem.id)\">\n                        {{ $tc('ec.global.delete') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        </template>\n    </sw-page>\n{% endblock %}","import template from './effectconnect-connection-overview.twig';\n\nShopware.Component.register('effectconnect-connection-overview', {\n    inject: ['EffectConnectConnectionService'],\n\n    data() {\n        return {\n            connections: [],\n            error:null,\n            columns: [\n                { property: 'id', visible: false },\n                { property: 'name', label: 'Name' },\n                { property: 'salesChannelReference', label: 'Sales channel' }\n            ],\n            showModal: false,\n            selectedItem: null,\n        };\n    },\n\n    created() {\n        this.refresh();\n    },\n\n    methods: {\n        tc(key) {\n            return this.$tc('ec.connection.overview.' + key);\n        },\n        refresh() {\n            this.connections = [];\n            this.EffectConnectConnectionService.getAll().then((data) => {\n                for(let connection of data.connections) {\n                    this.connections.push(connection);\n                }\n            });\n        },\n        showDeleteModal(item) {\n            this.showModal = true;\n            this.selectedItem = item;\n        },\n        closeDeleteModal() {\n            this.showModal = false;\n            this.selectedItem = null;\n        },\n        deleteItem(id) {\n            this.EffectConnectConnectionService.delete(id).then(() => {\n                this.closeDeleteModal();\n                this.refresh();\n            });\n        },\n        handleError(error) {\n            this.error = error;\n            setTimeout(() => this.error=null, 3000);\n        },\n    },\n\n    template: template\n});\n","{% block connection_edit %}\n    <sw-page class=\"connection-edit\">\n        <template #smart-bar-actions>\n            <sw-button @click=\"save()\" :disabled=\"busySaving || !loaded\" variant=\"primary\" >\n                {{ $tc('ec.global.save') }}\n            </sw-button>\n        </template>\n        <template #smart-bar-back>\n            <router-link class=\"smart-bar__back-btn\" :to=\"{ name: 'effectconnect.connection.overview' }\">\n                <sw-icon name=\"regular-chevron-left-s\" small />\n            </router-link>\n        </template>\n        <template #content>\n            <sw-loader v-if=\"busySaving\"></sw-loader>\n            <div v-if=\"loaded\">\n                <br><br>\n                <sw-card :title=\"tc('general')\">\n                    <sw-inherit-wrapper :helpText=\"tc('salesChannelHelpText')\" :label=\"tc('salesChannelLabel')\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('salesChannelPlaceholder')\"\n                                    :disabled=\"!newItem\"\n                                    :options=\"availableSalesChannels\"\n                                    :value=\"connection.salesChannelId\" @update:value=\"connection.salesChannelId = $event\"\n                            >\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('nameHelpText')\" :label=\"tc('nameLabel')\">\n                        <template v-slot:content>\n                            <sw-text-field :value=\"connection.name\" @update:value=\"connection.name = $event\" :placeholder=\"tc('namePlaceholder')\"></sw-text-field>\n                        </template> {# }v-model=\"connection.name\"#}\n                    </sw-inherit-wrapper>\n                </sw-card>\n                <sw-card :title=\"tc('api')\">\n                    <sw-inherit-wrapper :helpText=\"tc('publicKeyHelpText')\" :label=\"tc('publicKeyLabel')\">\n                        <template v-slot:content>\n                            <sw-text-field type=\"input\" :placeholder=\"tc('publicKeyPlaceholder')\" :value=\"connection.publicKey\" @update:value=\"connection.publicKey = $event\"></sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('secretKeyHelpText')\" :label=\"tc('secretKeyLabel')\">\n                        <template v-slot:content>\n                            <sw-text-field type=\"password\" :placeholder=\"tc('secretKeyPlaceholder')\" :value=\"connection.secretKey\" @update:value=\"connection.secretKey = $event\"></sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-button :disabled=\"!connection.secretKey || !connection.publicKey\" @click=\"testApiCredentials()\" size=\"small\">\n                        <sw-icon name=\"regular-check-circle\" small />\n                        {{ tc('testCredentials') }}\n                    </sw-button>\n                </sw-card>\n                <sw-card :title=\"tc('catalogExport')\">\n                    <sw-label>\n                        <span>\n                            {{  tc('scheduleInformationText') }}\n                            {{  tc('schedules.' + connection.catalogExportSchedule) }}\n                        </span>\n                    </sw-label>\n                    <br>\n                    <sw-switch-field bordered\n                                     :value=\"connection.addLeadingZeroToEan\" @update:value=\"connection.addLeadingZeroToEan = $event\"\n                                     :label=\"tc('addLeadingZeroToEanLabel')\"\n                                     :helpText=\"tc('addLeadingZeroToEanHelpText')\">\n                    </sw-switch-field>\n                    <sw-switch-field bordered\n                                     :value=\"connection.useSpecialPrice\" @update:value=\"connection.useSpecialPrice = $event\"\n                                     :label=\"tc('useSpecialPriceLabel')\"\n                                     :helpText=\"tc('useSpecialPriceHelpText')\">\n                    </sw-switch-field>\n                    <sw-switch-field bordered\n                                     :value=\"connection.useFallbackTranslations\" @update:value=\"connection.useFallbackTranslations = $event\"\n                                     :label=\"tc('useFallbackTranslationsLabel')\"\n                                     :helpText=\"tc('useFallbackTranslationsHelpText')\">\n                    </sw-switch-field>\n                    <sw-switch-field bordered\n                                     :value=\"connection.useSalesChannelDefaultLanguageAsFirstFallbackLanguage\" @update:value=\"connection.useSalesChannelDefaultLanguageAsFirstFallbackLanguage = $event\"\n                                     :label=\"tc('useSalesChannelDefaultLanguageAsFirstFallbackLanguageLabel')\"\n                                     :helpText=\"tc('useSalesChannelDefaultLanguageAsFirstFallbackLanguageHelpText')\">\n                    </sw-switch-field>\n                    <sw-switch-field bordered\n                                     :value=\"connection.useSystemLanguages\" @update:value=\"connection.useSystemLanguages = $event\"\n                                     :label=\"tc('useSystemLanguagesLabel')\"\n                                     :helpText=\"tc('useSystemLanguagesHelpText')\">\n                    </sw-switch-field>\n                    <sw-button :disabled=\"newItem\" @click=\"triggerCatalogExport()\" size=\"small\">\n                        <sw-icon name=\"regular-rocket\" small />\n                        {{ tc('triggerCatalogExport') }}\n                    </sw-button>\n                </sw-card>\n                <sw-card :title=\"tc('offerExport')\">\n                    <sw-label>\n                        <span>\n                            {{  tc('scheduleInformationText') }}\n                            {{  tc('schedules.' + connection.offerExportSchedule) }}\n                        </span>\n                    </sw-label>\n                    <br>\n                    <sw-inherit-wrapper :helpText=\"tc('stockTypeHelpText')\" :label=\"tc('stockTypeLabel')\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('stockTypePlaceholder')\"\n                                    :options=\"stockTypes\"\n                                    :value=\"connection.stockType\" @update:value=\"connection.stockType = $event\">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                </sw-card>\n                <sw-card :title=\"tc('orderImport')\">\n                    <sw-label>\n                        <span>\n                            {{  tc('scheduleInformationText') }}\n                            {{  tc('schedules.' + connection.orderImportSchedule) }}\n                        </span>\n                    </sw-label>\n                    <br>\n                    <sw-inherit-wrapper :helpText=\"tc('orderStatusHelpText')\" :label=\"tc('orderStatusLabel')\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('orderStatusPlaceholder')\"\n                                    :options=\"orderStatuses\"\n                                    :value=\"connection.orderStatus\" @update:value=\"connection.orderStatus = $event\">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('paymentStatusHelpText')\" :label=\"tc('paymentStatusLabel')\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('paymentStatusPlaceholder')\"\n                                    :options=\"paymentStatuses\"\n                                    :value=\"connection.paymentStatus\" @update:value=\"connection.paymentStatus = $event\">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('paymentMethodHelpText')\" :label=\"tc('paymentMethodLabel')\">\n                        <template v-slot:content>\n                            <sw-entity-single-select\n                                    :placeholder=\"tc('paymentMethodPlaceholder')\"\n                                    :value=\"connection.paymentMethod\"\n                                    entity=\"payment_method\"\n                                    @update:value=\"connection.paymentMethod = $event\">\n                            </sw-entity-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('shippingMethodHelpText')\" :label=\"tc('shippingMethodLabel')\">\n                        <template v-slot:content>\n                            <sw-entity-single-select\n                                    :placeholder=\"tc('shippingMethodPlaceholder')\"\n                                    :value=\"connection.shippingMethod\"\n                                    entity=\"shipping_method\"\n                                    @update:value=\"connection.shippingMethod = $event\">\n                            </sw-entity-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-switch-field bordered\n                                     :label=\"tc('createCustomerLabel')\"\n                                     :helpText=\"tc('createCustomerHelpText')\"\n                                     :value=\"connection.createCustomer\"\n                                     @update:value=\"connection.createCustomer = $event\"\n                        >\n                    </sw-switch-field>\n                    <sw-inherit-wrapper :helpText=\"tc('customerGroupHelpText')\" :label=\"tc('customerGroupLabel')\" v-show=\"connection.createCustomer\">\n                        <template v-slot:content>\n                            <sw-entity-single-select\n                                    :placeholder=\"tc('customerGroupPlaceholder')\"\n                                    :value=\"connection.customerGroup\"\n                                    entity=\"customer_group\"\n                                    @update:value=\"connection.customerGroup = $event\">\n                            </sw-entity-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('customerSourceTypeHelpText')\" :label=\"tc('customerSourceTypeLabel')\" v-show=\"connection.createCustomer\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('customerSourceTypePlaceholder')\"\n                                    :options=\"customerSourceTypes\"\n                                    :value=\"connection.customerSourceType\"\n                                    @update:value=\"connection.customerSourceType = $event\"\n                            >\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-switch-field bordered\n                                     :label=\"tc('importExternallyFulfilledOrdersLabel')\"\n                                     :helpText=\"tc('importExternallyFulfilledOrdersHelpText')\"\n                                     :value=\"connection.importExternallyFulfilledOrders\"\n                                     @update:value=\"connection.importExternallyFulfilledOrders = $event\"\n                    >\n                    </sw-switch-field>\n                    <sw-inherit-wrapper :helpText=\"tc('externalPaymentStatusHelpText')\" :label=\"tc('externalPaymentStatusLabel')\" v-show=\"connection.importExternallyFulfilledOrders\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('externalPaymentStatusPlaceholder')\"\n                                    :options=\"paymentStatuses\"\n                                    :value=\"connection.externalPaymentStatus\" @update:value=\"connection.externalPaymentStatus = $event\">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('externalOrderStatusHelpText')\" :label=\"tc('externalOrderStatusLabel')\" v-show=\"connection.importExternallyFulfilledOrders\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('externalOrderStatusPlaceholder')\"\n                                    :options=\"orderStatuses\"\n                                    :value=\"connection.externalOrderStatus\" @update:value=\"connection.externalOrderStatus = $event\">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                    <sw-inherit-wrapper :helpText=\"tc('externalShippingStatusHelpText')\" :label=\"tc('externalShippingStatusLabel')\" v-show=\"connection.importExternallyFulfilledOrders\">\n                        <template v-slot:content>\n                            <sw-single-select\n                                    :placeholder=\"tc('externalShippingStatusPlaceholder')\"\n                                    :options=\"shippingStatuses\"\n                                    :value=\"connection.externalShippingStatus\" @update:value=\"connection.externalShippingStatus = $event\">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                </sw-card>\n            </div>\n            <sw-modal v-if=\"modal != null\" @modal-close=\"modal.onCancel()\">\n                <p>{{ modal.text }}</p>\n                <template v-slot:modal-footer>\n                    <sw-button size=\"small\" @click=\"modal.onCancel()\">\n                        {{ $tc('ec.global.cancel') }}\n                    </sw-button>\n                    <sw-button size=\"small\" variant=\"danger\" @click=\"modal.onConfirm()\">\n                        {{ $tc('ec.global.confirm') }}\n                    </sw-button>\n                </template>\n            </sw-modal>\n        </template>\n    </sw-page>\n{% endblock %}","import template from './effectconnect-connection-edit.twig';\n\nconst { Mixin } = Shopware;\n\nclass Modal {\n    constructor(text, onConfirm, onCancel) {\n        this.text = text;\n        this.onConfirm = onConfirm;\n        this.onCancel = onCancel;\n    }\n}\n\nShopware.Component.register('effectconnect-connection-edit', {\n    inject: ['EffectConnectConnectionService', 'EffectConnectTaskService'],\n\n    data() {\n        return {\n            toasts: [],\n            modal: null,\n            loaded: false,\n            busySaving:false,\n            id: this.$route.params.id,\n            newItem: false,\n            salesChannels: [],\n            availableSalesChannels: [],\n            connection: null,\n            schedules: [],\n            stockTypes: [],\n            paymentStatuses: [],\n            orderStatuses: [],\n            customerSourceTypes: [],\n            shippingStatuses: [],\n        };\n    },\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    created() {\n        this.loaded = false;\n        this.EffectConnectConnectionService.getSalesChannelData()\n            .then((salesChannelData) => {\n                this.initConnection(salesChannelData).then(() => {\n                    this.EffectConnectConnectionService.getOptions().then((data) => {\n                        data = data.data;\n                        this.schedules = this._toOptions('schedules', data.schedules);\n                        this.stockTypes = this._toOptions('stockTypes', data.stockTypes);\n                        this.paymentStatuses = this._toOptions('paymentStatuses', data.payment);\n                        this.orderStatuses = this._toOptions('orderStatuses', data.order);\n                        this.customerSourceTypes = this._toOptions('customerSourceTypes', data.customerSourceTypes);\n                        this.shippingStatuses = this._toOptions('shippingStatuses', data.shipping);\n                        this.loaded = true;\n                    })\n                });\n            })\n            .catch((e) => this.handleError(e));\n    },\n\n    methods: {\n        save() {\n            console.log(this.connection)\n            let requiredFields = {name: 'Name', salesChannelId: 'Sales channel'};\n            for(let requiredField of Object.keys(requiredFields)) {\n                if (!this.connection[requiredField]) {\n                    this.handleError(requiredFields[requiredField] + ' is required.');\n                    return;\n                }\n            }\n            this.busySaving = true;\n            this.EffectConnectConnectionService.save(this.connection).then((data) => {\n                if (this.newItem) {\n                    this.$router.push({\n                        name: 'effectconnect.connection.edit',\n                        params: { id: data.id },\n                    });\n                    window.location.reload();\n                } else {\n                    this.createNotificationSuccess({\n                        message: this.$tc('ec.global.successSaved')\n                    })\n                }\n            }).catch((e) => this.handleError(e))\n                .finally(() => this.busySaving = false);\n        },\n        initConnection(salesChannelData) {\n            if (this.id) {\n                return this.EffectConnectConnectionService.get(this.id).then((connectionData) => {\n                    this.connection = connectionData.connection;\n                    this.availableSalesChannels = salesChannelData.data.filter(x => x.value === this.connection.salesChannelId);\n                }).catch((e) => this.handleError(e));\n            } else {\n                this.newItem = true;\n                this.availableSalesChannels = salesChannelData.data;\n                return this.EffectConnectConnectionService.getDefaultSettings().then((defaultSettingsData) => {\n                    this.connection = defaultSettingsData.data;\n                }).catch((e) => this.handleError(e));\n            }\n        },\n        triggerCatalogExport() {\n            this.modal = new Modal('Are you sure you want to trigger this process?',\n                () => {\n                    this.createNotificationSuccess({message: this.tc('taskTriggered')});\n                    this.EffectConnectTaskService.trigger(this.connection.salesChannelId, 'catalog');\n                    this.modal = null;\n                },\n                () => {\n                    this.modal = null;\n                }\n            );\n        },\n        testApiCredentials() {\n            return this.EffectConnectConnectionService.testApiCredentials(this.connection.publicKey, this.connection.secretKey)\n                .then((data) => {\n                    if (data.valid) {\n                        this.createNotificationSuccess({message: this.tc('apiCredentialsOK')});\n                    } else {\n                        this.createNotificationError({message: this.tc('apiCredentialsNOK')});\n                    }\n            }).catch((e) => this.handleError(e));\n        },\n        handleError(error) {\n            this.createNotificationError({message:error});\n        },\n        tc(key) {\n            return this.$tc('ec.connection.edit.' + key);\n        },\n        _toOption(category, value) {\n            return {value: value, label: this.tc(category + \".\" + value)};\n        },\n        _toOptions(category, values) {\n            return values.map(x => this._toOption(category, x));\n        },\n    },\n\n    template: template\n});\n","import nlNL from './snippet/nl-NL';\nimport enGB from './snippet/en-GB';\n\nimport './page/effectconnect-connection-overview';\nimport './page/effectconnect-connection-edit';\n\nShopware.Module.register('effectconnect-connection', {\n    type: 'plugin',\n    name: 'effectconnect-connection',\n    title: 'ec.global.modules.connection.title',\n    description: 'ec.global.modules.connection.description',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'default-action-settings',\n    entity: 'integration',\n\n    snippets: {\n        'nl-NL': nlNL,\n        'en-GB': enGB\n    },\n\n    routes: {\n        overview: {\n            component: 'effectconnect-connection-overview',\n            path: 'overview',\n        },\n        edit: {\n            component: 'effectconnect-connection-edit',\n            path: 'edit/:id',\n            meta: {\n                parentPath: 'effectconnect-connection.overview',\n                parentRoute: 'effectconnect-connection.overview'\n            }\n        },\n        create: {\n            component: 'effectconnect-connection-edit',\n            path: 'create',\n            meta: {\n                parentPath: 'effectconnect-connection.overview',\n                parentRoute: 'effectconnect-connection.overview'\n            }\n        }\n    },\n\n    navigation: [{\n        id: 'effectconnect-connection',\n        label: 'ec.global.modules.connection.label',\n        color: '#ff3d58',\n        path: 'effectconnect.connection.overview',\n        parent: 'effectconnect-module',\n        position: 100\n    }]\n});","{% block log_overview %}\n    <sw-page class=\"log-overview-list\">\n        <template v-slot:smart-bar-actions>\n            <sw-button v-show=\"shouldDisplayDownloadButton()\" variant=\"primary\" @click=\"downloadSelectedLogFiles()\">\n                {{ tc('download') }}\n            </sw-button>\n        </template>\n        <template v-slot:content>\n            <div>\n                <sw-data-grid ref=\"logGrid\" :dataSource=\"files\" :columns=\"columns\" :itemIdentifierProperty=\"'fullPath'\">\n                    <template v-slot:actions=\"{ item }\">\n                        <sw-context-menu-item @click=\"downloadLogFile(item.fullPath)\">\n                            {{ tc('download') }}\n                        </sw-context-menu-item>\n                    </template>\n                </sw-data-grid>\n            </div>\n        </template>\n    </sw-page>\n{% endblock %}","import template from './effectconnect-log-overview.twig';\n\nShopware.Component.register('effectconnect-log-overview', {\n    inject: ['EffectConnectLogService'],\n\n    data() {\n        return {\n            files: [],\n            columns: [\n                { property: 'filename', label: this.tc('filename'), allowResize: false },\n                { property: 'lastUpdated', label: this.tc('lastUpdated'), allowResize: false },\n                { property: 'fullPath', label: this.tc('fullPath'), visible: false },\n                { property: 'id', label: this.tc('id'), visible: false }\n            ],\n        };\n    },\n\n    created() {\n        this.refresh();\n    },\n\n    methods: {\n        tc(key) {\n            return this.$tc('ec.log.overview.' + key);\n        },\n        refresh() {\n            this.EffectConnectLogService.getAll().then(data => {\n                for(let file of data.files) {\n                    this.files.push({\n                        id: file.path + '/' + file.filename,\n                        fullPath: file.path + '/' + file.filename,\n                        lastUpdated: new Date(file.lastUpdatedAt * 1000),\n                        filename: file.filename\n                    });\n                }\n            });\n        },\n        shouldDisplayDownloadButton() {\n            let logGrid = this.$refs['logGrid'];\n            let selected = logGrid ? logGrid.selectionCount : 0;\n            return selected > 1;\n        },\n        downloadLogFile(filepath) {\n            let split = filepath.split('/');\n            let filename = split[split.length-1];\n            this._downloadFiles(filepath, filename);\n        },\n        downloadSelectedLogFiles() {\n            let filenames = Object.values(this.$refs['logGrid'].selection).map((file) => {return file.fullPath;}).join(',');\n            this._downloadFiles(filenames, 'EC-Logfiles '+new Date().toISOString()+'.zip');\n        },\n        _downloadFiles(filenames, filename) {\n            this.EffectConnectLogService.downloadFiles(filenames).then(data => {\n                const url = window.URL.createObjectURL(new Blob([data]));\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', filename);\n                document.body.appendChild(link);\n                link.click();\n            })\n        },\n    },\n\n    template: template\n});\n","import nlNL from './snippet/nl-NL';\nimport enGB from './snippet/en-GB';\n\nimport './page/effectconnect-log-overview';\n\nShopware.Module.register('effectconnect-log', {\n    type: 'plugin',\n    name: 'effectconnect-log',\n    title: 'ec.global.modules.log.title',\n    description: 'ec.global.modules.log.description',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'default-action-settings',\n    entity: 'integration',\n\n    snippets: {\n        'nl-NL': nlNL,\n        'en-GB': enGB\n    },\n\n    routes: {\n        overview: {\n            component: 'effectconnect-log-overview',\n            path: 'overview',\n        }\n    },\n\n    navigation: [{\n        id: 'effectconnect-log',\n        label: 'ec.global.modules.log.label',\n        color: '#ff3d58',\n        path: 'effectconnect.log.overview',\n        parent: 'effectconnect-module',\n        position: 100\n    }]\n});","const ApiService = Shopware.Classes.ApiService;\n\nexport default class EffectConnectApiService extends ApiService {\n    /**\n     * @constructor\n     * @param {AxiosInstance} httpClient\n     * @param loginService\n     * @param category\n     */\n    constructor(httpClient, loginService, category) {\n        super(httpClient, loginService, 'ec/action');\n        this.category = category;\n    }\n\n    _getBaseUri() {\n        return 'ec/action' + (this.category ? '/' + this.category : '');\n    }\n\n    getUri(endpoint, queryParams) {\n        let uri = this._getBaseUri() + '/' + endpoint;\n        if (!queryParams) {\n            return uri;\n        }\n\n        let flattened = Object.entries(queryParams).map(([k,v]) => `${k}=${v}`);\n        return uri +  \"?\" + flattened.join('&');\n    }\n\n    handleResponse(response) {\n        return ApiService.handleResponse(response);\n    }\n\n    getData(config) {\n        let headers = this.getBasicHeaders();\n        return {...config, headers};\n    }\n\n    handlePromise(promise) {\n        return promise.then(r => this.handleResponse(r));\n    }\n\n    getCall(endpoint) {\n        return this.handlePromise(this.httpClient.get(this.getUri(endpoint), this.getData({})));\n    }\n\n    postCall(endpoint, data = {}) {\n        return this.handlePromise(this.httpClient.post(this.getUri(endpoint), data, this.getData({})));\n    }\n\n}\n","import EffectConnectApiService from \"../service/effectconnect-api-service\";\n\nexport default class EffectConnectConnectionService extends EffectConnectApiService {\n    constructor(httpClient, loginService) {\n        super(httpClient, loginService, 'connection');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    getAll() {\n        return this.getCall('getAll');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    get(id) {\n        return this.getCall('get/'+id);\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    getSalesChannelData() {\n        return this.getCall('getSalesChannelData');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    getOptions() {\n        return this.getCall('getOptions');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    getDefaultSettings() {\n        return this.getCall('getDefaultSettings');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    delete(id) {\n        return this.postCall('delete/'+id);\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    save(connection) {\n        console.log(connection)\n        return this.postCall('save', {connection: connection});\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    testApiCredentials(publicKey, secretKey) {\n        return this.postCall('testApiCredentials', {publicKey: publicKey, secretKey: secretKey});\n    }\n}","import EffectConnectApiService from \"../service/effectconnect-api-service\";\n\nexport default class EffectConnectTaskService extends EffectConnectApiService {\n    constructor(httpClient, loginService) {\n        super(httpClient, loginService, 'task');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    trigger(salesChannelId, type) {\n        return this.postCall('trigger/'+salesChannelId+'/'+type);\n    }\n}","import EffectConnectApiService from \"../service/effectconnect-api-service\";\n\nexport default class EffectConnectLogService extends EffectConnectApiService {\n    constructor(httpClient, loginService) {\n        super(httpClient, loginService, 'log');\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    downloadFiles(filename) {\n        let config = {\n            responseType:'blob'\n        };\n        return this.handlePromise(this.httpClient.get(this.getUri('downloadFiles', {filenames: filename}), this.getData(config)));\n    }\n\n    /**\n     * @returns {Promise|Object}\n     */\n    getAll() {\n        return this.getCall('getAll');\n    }\n}","const { Application } = Shopware;\nconst initContainer = Application.getContainer('init');\n\nimport EffectConnectConnectionService from \"./effectconnect-connection-service\";\nimport EffectConnectTaskService from \"./effectconnect-task-service\";\nimport EffectConnectLogService from \"./effectconnect-log-service\";\n\nfunction createServices() {\n    Application.addServiceProvider('EffectConnectConnectionService', (container) => {\n        return new EffectConnectConnectionService(initContainer.httpClient, container.loginService);\n    });\n    Application.addServiceProvider('EffectConnectTaskService', (container) => {\n        return new EffectConnectTaskService(initContainer.httpClient, container.loginService);\n    });\n    Application.addServiceProvider('EffectConnectLogService', (container) => {\n        return new EffectConnectLogService(initContainer.httpClient, container.loginService);\n    });\n}\n\nexport default createServices;","import './module/effectconnect-module';\nimport './module/effectconnect-connection';\nimport './module/effectconnect-log';\n\nimport createServices from './core/service/main';\ncreateServices();"],"names":["_versionToFloat","version","versionIsBefore","nav","nlNL","enGB","template$2","key","data","connection","item","id","error","template","template$1","Mixin","Modal","text","onConfirm","onCancel","salesChannelData","e","requiredFields","requiredField","connectionData","x","defaultSettingsData","category","value","values","file","logGrid","filepath","split","filename","filenames","url","link","ApiService","EffectConnectApiService","httpClient","loginService","endpoint","queryParams","uri","flattened","k","v","response","config","headers","promise","r","EffectConnectConnectionService","publicKey","secretKey","EffectConnectTaskService","salesChannelId","type","EffectConnectLogService","Application","initContainer","createServices","container"],"mappings":"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"}