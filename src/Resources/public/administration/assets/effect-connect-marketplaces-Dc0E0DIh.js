function u(t){return t=t.replace(/\D/g,""),parseFloat(t.substring(0,1)+"."+t.substring(1,t.length))}function h(t){return u(Shopware.Context.app.config.version)<t}const g={global:{save:"Opslaan",cancel:"Annuleren",edit:"Bewerk",delete:"Verwijderen",create:"Creëren",successSaved:"Succesvol opgeslagen",trigger:"Uitvoeren",confirm:"Bevestigen",modules:{main:{label:"Effectconnect"},log:{label:"Logs",title:"EffectConnect Marketplaces - Logs",description:"Logs"},connection:{label:"Verbindingen",title:"EffectConnect Marketplaces - verbindingen",description:"Verbindingen"}}}},m={ec:g},f={global:{save:"Save",cancel:"Cancel",edit:"Edit",delete:"Delete",create:"Create",successSaved:"Successfully saved",trigger:"Trigger",confirm:"Confirm",modules:{main:{label:"EffectConnect"},log:{label:"Logs",title:"EffectConnect Marketplaces - Logs",description:"Logs"},connection:{label:"Connections",title:"EffectConnect Marketplaces - Connections",description:"Connections"}}}},b={ec:f};let c={id:"effectconnect-module",label:"EffectConnect",color:"#ff3d58",icon:"default-shopping-paper-bag-product",parent:"sw-extension",position:100};h(6.4)&&delete c.parent;Shopware.Module.register("effectconnect-module",{type:"plugin",name:"effectconnect-module",title:"EffectConnect",description:"EffectConnect module",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",entity:"integration",snippets:{"nl-NL":m,"en-GB":b},routes:{dummy:{component:{template:""},path:"effectconnect.log"}},navigation:[c]});const w={connection:{overview:{deleteConnection:"Verwijderen",textConfirmDelete:"Weet u zeker dat u deze verbinding wilt verwijderen?",textDeleteInfo:"Deze actie kan niet worden teruggedraaid."},edit:{general:"Algemeen",api:"API",catalogExport:"Catalogus exporteren",offerExport:"Offer exporteren",orderImport:"Order import",noSalesChannelsAvailable:"Geen sales channels beschikbaar",salesChannelHelpText:"Welk sales channel moet worden gebruikt",salesChannelLabel:"Sales channel",salesChannelPlaceholder:"Selecteer een sales channel",nameHelpText:"Alleen gebruikt voor interne referentie",nameLabel:"Naam",namePlaceholder:"Kies een interne naam ...",publicKeyHelpText:"Zoek uw public key in de API key management in EffectConnect.",publicKeyLabel:"Public key",publicKeyPlaceholder:"Vul de public key in ...",secretKeyHelpText:"Zoek uw secret key in de API key management in EffectConnect.",secretKeyLabel:"Secret key",secretKeyPlaceholder:"Vul de secret key in ...",scheduleHelpText:"Bepaalt of en wanneer het proces wordt uitgevoerd.",scheduleLabel:"Schedule",schedulePlaceholder:"Kies een aangepaste schedule ...",schedules:{0:"uitgeschakeld",300:"elke 5 minuten",900:"elke 15 minuten",1800:"elke 30 minuten",3600:"elk uur",21600:"elke 6 uur",43200:"elke 12 uur",64800:"elke 18 uur",86400:"elke 24 uur"},addLeadingZeroToEanLabel:"Voeg voorloopnul toe aan EAN",addLeadingZeroToEanHelpText:"Selecteer of de plugin automatisch een voorloopnul moet toevoegen aan een EAN die uit 12 tekens bestaat.",useSpecialPriceLabel:"Hanteer speciale prijs",useSpecialPriceHelpText:"Selecteer of het speciale prijskenmerk moet worden gebruikt bij het exporteren van de catalogus naar effectconnect. De oorspronkelijke prijs zal net zo goed worden geÃ«xporteerd, maar in dat geval als oorspronkelijke prijskenmerk.",useFallbackTranslationsLabel:"Gebruik fallback-vertalingen",useFallbackTranslationsHelpText:"Selecteer of de standaardtaal moet worden gebruikt wanneer een vertaalbare waarde niet in een van de andere talen wordt ingesteld bij het exporteren van de catalogus naar effectconnect.",useSalesChannelDefaultLanguageAsFirstFallbackLanguageLabel:"Gebruik de standaardtaal van het sales channel als eerste fallback-taal",useSalesChannelDefaultLanguageAsFirstFallbackLanguageHelpText:"Standaard wordt de standaardtaal van de systeemtalen gebruikt als fallback-taal. Indien ingeschakeld, wordt de standaardtaal van het sales channel eerst als fallback-taal gebruikt.",useSystemLanguagesLabel:"Gebruik systeemtalen",useSystemLanguagesHelpText:"Standaard worden de gedefinieerde talen in het sales channel gebruikt. Indien ingeschakeld, worden de systeemtalen gebruikt bij het exporteren van de catalogus naar effectconnect.",stockTypeHelpText:"Bepaalt welke voorraad moet worden gebruikt bij het bouwen van de export.",stockTypeLabel:"Voorraadtype",stockTypes:{physicalStock:"Fysieke voorraad",salableStock:"Verkoopbare voorraad"},paymentStatusLabel:"Betalingsstatus",paymentStatusHelpText:"Selecteer de betalingsstatus voor geÃ¯mporteerde bestellingen.",paymentStatuses:{paid:"Betaald",open:"Open"},orderStatusLabel:"Bestelstatus",orderStatusHelpText:"Selecteer de bestelstatus voor geÃ¯mporteerde bestellingen.",orderStatuses:{open:"Open",in_progress:"Bezig"},paymentMethodHelpText:"Selecteer de betaalmethode voor geÃ¯mporteerde bestellingen.",paymentMethodLabel:"Betalingsmethode",paymentMethodPlaceholder:"Kies een betaal methode...",shippingMethodHelpText:"Selecteer de verzendmethode voor geÃ¯mporteerde bestellingen.",shippingMethodLabel:"Verzendmethode",shippingMethodPlaceholder:"Kies een verzendmethode ...",triggerCatalogExportHelpText:"Activeert een export van een catalogus.",triggerCatalogExportLabel:"Trigger catalogus exporteren",scheduleInformationText:"Dit proces staat ingesteld op: ",taskTriggered:"Taak met succes geactiveerd.",apiCredentialsOK:"Referenties geldig",apiCredentialsNOK:"Referenties zijn niet geldig",triggerCatalogExport:"Trigger catalogus exporteren",customerSourceTypes:{shipping:"Verzendadres",billing:"Factuuradres"},shippingStatuses:{shipped:"Verzonden",open:"Open",partially_shipped:"Gedeeltelijk Verzonden"},shippingStatusLabel:"Verzendstatus",shippingStatusHelpText:"Selecteer de verzendstatus voor geïmporteerde bestellingen.",createCustomerLabel:"Klanten aanmaken?",createCustomerHelpText:"Of klanten aangemaakt worden bij het importeren van een bestelling.",customerGroupLabel:"Klantgroep",customerGroupHelpText:"Welke klantengroep nieuw gecreëerde klanten behoren",customerSourceTypeLabel:"Type klantenbron",customerSourceTypeHelpText:"Van welke adresbron nieuw gemaakte klanten hun informatie uit halen",importExternallyFulfilledOrdersLabel:"Extern vervulde bestellingen importeren?",importExternallyFulfilledOrdersHelpText:"Of extern vervulde bestellingen geimporteerd moeten worden.",externalPaymentStatusLabel:"Betalingsstatus (extern vervulde bestelling)",externalPaymentStatusHelpText:"Welke betalingsstatus extern vervulde bestellingen hebben.",externalOrderStatusLabel:"Bestelstatus (extern vervulde bestelling)",externalOrderStatusHelpText:"Welke orderstatus extern vervulde bestellingen zullen hebben.",externalShippingStatusLabel:"Verzendstatus (extern vervulde bestelling)",externalShippingStatusHelpText:"Welke verzendstatus extern vervulde bestellingen zullen zijn.",testCredentials:"Test API-referenties"}}},v={ec:w},S={connection:{overview:{deleteConnection:"Delete",textConfirmDelete:"Are you sure you want to delete this connection?",textDeleteInfo:"This action cannot be reversed."},edit:{general:"General",api:"API",catalogExport:"Catalog export",offerExport:"Offer export",orderImport:"Order import",taskTriggered:"Task successfully triggered.",noSalesChannelsAvailable:"No sales channels available",scheduleInformationText:"This process is set as: ",triggerCatalogExportHelpText:"Triggers a catalog export.",triggerCatalogExportLabel:"Trigger catalog export",salesChannelHelpText:"Which sales channel to be used",salesChannelLabel:"Sales channel",salesChannelPlaceholder:"Select a sales channel",nameHelpText:"Used for internal reference only",nameLabel:"Name",namePlaceholder:"Choose an internal name...",publicKeyHelpText:"Find your public key in the API Key Management section in EffectConnect.",publicKeyLabel:"Public key",publicKeyPlaceholder:"Fill in the public key...",secretKeyHelpText:"Find your secret key in the API Key Management section in EffectConnect.",secretKeyLabel:"Secret key",secretKeyPlaceholder:"Fill in the secret key...",scheduleHelpText:"Determines if and when the process will run.",scheduleLabel:"Schedule",schedulePlaceholder:"Choose a custom schedule...",schedules:{0:"disabled",300:"every 5 minutes",900:"every 15 minutes",1800:"every 30 minutes",3600:"every hour",21600:"every 6 hours",43200:"every 12 hours",64800:"every 18 hours",86400:"every 24 hours"},addLeadingZeroToEanLabel:"Add leading zero to EAN",addLeadingZeroToEanHelpText:"Select whether the plugin should automatically add a leading zero to an EAN that consists of 12 characters.",useSpecialPriceLabel:"Use special price",useSpecialPriceHelpText:"Select whether the special price attribute should be used when exporting the catalog to EffectConnect. The original price will just as well be exported, but in that case as original price attribute.",useFallbackTranslationsLabel:"Use fallback translations",useFallbackTranslationsHelpText:"Select whether the default language should be used when a translatable value is not set in one of the other languages when exporting the catalog to EffectConnect.",useSalesChannelDefaultLanguageAsFirstFallbackLanguageLabel:"Use sales channel default language as first fallback language",useSalesChannelDefaultLanguageAsFirstFallbackLanguageHelpText:"By default the default language of the system languages is used as fallback language. When enabled, the sales channel default language will be used as fallback language first.",useSystemLanguagesLabel:"Use system languages",useSystemLanguagesHelpText:"By default the defined languages in the sales channel will be used. When enabled, the system languages will be used when exporting the catalog to EffectConnect.",stockTypeHelpText:"Determines which stock to use when building the exports.",stockTypeLabel:"Stock type",stockTypes:{physicalStock:"Physical stock",salableStock:"Saleable stock"},paymentStatusLabel:"Payment status",paymentStatusHelpText:"Select the payment status for imported orders.",paymentStatuses:{paid:"Paid",open:"Open"},orderStatusLabel:"Order status",orderStatusHelpText:"Select the order status for imported orders.",orderStatuses:{open:"Open",in_progress:"In progress"},customerSourceTypes:{shipping:"Shipping",billing:"Billing"},shippingStatuses:{shipped:"Shipped",open:"Open",partially_shipped:"Partially shipped"},shippingStatusLabel:"Shipping status",shippingStatusHelpText:"Select the shipping status for imported orders.",createCustomerLabel:"Create customers?",createCustomerHelpText:"Whether to create customers on order import",customerGroupLabel:"Customer group",customerGroupHelpText:"Which customer group newly created customers belong to",customerSourceTypeLabel:"Customer source type",customerSourceTypeHelpText:"Which address source newly created customers get their information from",importExternallyFulfilledOrdersLabel:"Import externally fulfilled orders?",importExternallyFulfilledOrdersHelpText:"Whether to import orders that are externally fulfilled.",externalPaymentStatusLabel:"Payment status (externally fulfilled order)",externalPaymentStatusHelpText:"Which payment status externally fulfilled orders will have.",externalOrderStatusLabel:"Order status (externally fulfilled order)",externalOrderStatusHelpText:"Which order status externally fulfilled orders will have.",externalShippingStatusLabel:"Shipping status (externally fulfilled order)",externalShippingStatusHelpText:"Which shipping status externally fulfilled orders will have.",paymentMethodHelpText:"Select the payment method for imported orders.",paymentMethodLabel:"Payment method",paymentMethodPlaceholder:"Choose a payment method...",shippingMethodHelpText:"Select the shipment method for imported orders.",shippingMethodLabel:"Shipment method",shippingMethodPlaceholder:"Choose a shipment method...",testCredentials:"Test API credentials",apiCredentialsOK:"Credentials valid",apiCredentialsNOK:"Credentials are not valid",triggerCatalogExport:"Trigger catalog export"}}},y={ec:S},x=`{% block connection_overview %} <sw-page class="connection-overview-list"> <template #smart-bar-actions> <sw-button variant="success" :router-link="{ name: 'effectconnect.connection.create'}"> {{ $tc('ec.global.create') }} </sw-button> </template> <template v-slot:content> <sw-alert variant="error" appearance="system" :showIcon="true" :closable="false" v-if="error"> {{ error }} </sw-alert> <div> <sw-data-grid :dataSource="connections" :columns="columns" :showSelection="false"> <template v-slot:actions="{ item }"> <sw-context-menu-item :router-link="{ name: 'effectconnect.connection.edit', params: { id: item.id } }"> {{ $tc('ec.global.edit') }} </sw-context-menu-item> <sw-context-menu-item variant="danger" @click="showDeleteModal(item)"> {{ tc('deleteConnection') }} </sw-context-menu-item> </template> </sw-data-grid> </div> <sw-modal v-if="showModal" @modal-close="closeModal()"> {% block ec_detail_settings_options_delete_modal_confirmtext %} <p>{{ tc('textConfirmDelete') }}</p> <p><strong>{{ selectedItem.name }}</strong></p> <p>{{ tc('textDeleteInfo') }}</p> {% endblock %} <template #modal-footer> <sw-button size="small" @click="closeDeleteModal"> {{ $tc('ec.global.cancel') }} </sw-button> <sw-button size="small" variant="danger" @click="deleteItem(selectedItem.id)"> {{ $tc('ec.global.delete') }} </sw-button> </template> </sw-modal> </template> </sw-page> {% endblock %}`;Shopware.Component.register("effectconnect-connection-overview",{inject:["EffectConnectConnectionService"],data(){return{connections:[],error:null,columns:[{property:"id",visible:!1},{property:"name",label:"Name"},{property:"salesChannelReference",label:"Sales channel"}],showModal:!1,selectedItem:null}},created(){this.refresh()},methods:{tc(t){return this.$tc("ec.connection.overview."+t)},refresh(){this.connections=[],this.EffectConnectConnectionService.getAll().then(t=>{for(let e of t.connections)this.connections.push(e)})},showDeleteModal(t){this.showModal=!0,this.selectedItem=t},closeDeleteModal(){this.showModal=!1,this.selectedItem=null},deleteItem(t){this.EffectConnectConnectionService.delete(t).then(()=>{this.closeDeleteModal(),this.refresh()})},handleError(t){this.error=t,setTimeout(()=>this.error=null,3e3)}},template:x});const C=`{% block connection_edit %} <sw-page class="connection-edit"> <template #smart-bar-actions> <sw-button @click="save()" :disabled="busySaving || !loaded" variant="primary" > {{ $tc('ec.global.save') }} </sw-button> </template> <template #smart-bar-back> <router-link class="smart-bar__back-btn" :to="{ name: 'effectconnect.connection.overview' }"> <sw-icon name="regular-chevron-left-s" small /> </router-link> </template> <template #content> <sw-loader v-if="busySaving"></sw-loader> <div v-if="loaded"> <br><br> <sw-card :title="tc('general')"> <sw-inherit-wrapper :helpText="tc('salesChannelHelpText')" :label="tc('salesChannelLabel')"> <template v-slot:content> <sw-single-select :placeholder="tc('salesChannelPlaceholder')" :disabled="!newItem" :options="availableSalesChannels" :value="connection.salesChannelId" @update:value="connection.salesChannelId = $event" > </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('nameHelpText')" :label="tc('nameLabel')"> <template v-slot:content> <sw-text-field :value="connection.name" @update:value="connection.name = $event" :placeholder="tc('namePlaceholder')"></sw-text-field> </template> {# }v-model="connection.name"#} </sw-inherit-wrapper> </sw-card> <sw-card :title="tc('api')"> <sw-inherit-wrapper :helpText="tc('publicKeyHelpText')" :label="tc('publicKeyLabel')"> <template v-slot:content> <sw-text-field type="input" :placeholder="tc('publicKeyPlaceholder')" :value="connection.publicKey" @update:value="connection.publicKey = $event"></sw-text-field> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('secretKeyHelpText')" :label="tc('secretKeyLabel')"> <template v-slot:content> <sw-text-field type="password" :placeholder="tc('secretKeyPlaceholder')" :value="connection.secretKey" @update:value="connection.secretKey = $event"></sw-text-field> </template> </sw-inherit-wrapper> <sw-button :disabled="!connection.secretKey || !connection.publicKey" @click="testApiCredentials()" size="small"> <sw-icon name="regular-check-circle" small /> {{ tc('testCredentials') }} </sw-button> </sw-card> <sw-card :title="tc('catalogExport')"> <sw-label> <span> {{ tc('scheduleInformationText') }} {{ tc('schedules.' + connection.catalogExportSchedule) }} </span> </sw-label> <br> <sw-switch-field bordered :value="connection.addLeadingZeroToEan" @update:value="connection.addLeadingZeroToEan = $event" :label="tc('addLeadingZeroToEanLabel')" :helpText="tc('addLeadingZeroToEanHelpText')"> </sw-switch-field> <sw-switch-field bordered :value="connection.useSpecialPrice" @update:value="connection.useSpecialPrice = $event" :label="tc('useSpecialPriceLabel')" :helpText="tc('useSpecialPriceHelpText')"> </sw-switch-field> <sw-switch-field bordered :value="connection.useFallbackTranslations" @update:value="connection.useFallbackTranslations = $event" :label="tc('useFallbackTranslationsLabel')" :helpText="tc('useFallbackTranslationsHelpText')"> </sw-switch-field> <sw-switch-field bordered :value="connection.useSalesChannelDefaultLanguageAsFirstFallbackLanguage" @update:value="connection.useSalesChannelDefaultLanguageAsFirstFallbackLanguage = $event" :label="tc('useSalesChannelDefaultLanguageAsFirstFallbackLanguageLabel')" :helpText="tc('useSalesChannelDefaultLanguageAsFirstFallbackLanguageHelpText')"> </sw-switch-field> <sw-switch-field bordered :value="connection.useSystemLanguages" @update:value="connection.useSystemLanguages = $event" :label="tc('useSystemLanguagesLabel')" :helpText="tc('useSystemLanguagesHelpText')"> </sw-switch-field> <sw-button :disabled="newItem" @click="triggerCatalogExport()" size="small"> <sw-icon name="regular-rocket" small /> {{ tc('triggerCatalogExport') }} </sw-button> </sw-card> <sw-card :title="tc('offerExport')"> <sw-label> <span> {{ tc('scheduleInformationText') }} {{ tc('schedules.' + connection.offerExportSchedule) }} </span> </sw-label> <br> <sw-inherit-wrapper :helpText="tc('stockTypeHelpText')" :label="tc('stockTypeLabel')"> <template v-slot:content> <sw-single-select :placeholder="tc('stockTypePlaceholder')" :options="stockTypes" :value="connection.stockType" @update:value="connection.stockType = $event"> </sw-single-select> </template> </sw-inherit-wrapper> </sw-card> <sw-card :title="tc('orderImport')"> <sw-label> <span> {{ tc('scheduleInformationText') }} {{ tc('schedules.' + connection.orderImportSchedule) }} </span> </sw-label> <br> <sw-inherit-wrapper :helpText="tc('orderStatusHelpText')" :label="tc('orderStatusLabel')"> <template v-slot:content> <sw-single-select :placeholder="tc('orderStatusPlaceholder')" :options="orderStatuses" :value="connection.orderStatus" @update:value="connection.orderStatus = $event"> </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('paymentStatusHelpText')" :label="tc('paymentStatusLabel')"> <template v-slot:content> <sw-single-select :placeholder="tc('paymentStatusPlaceholder')" :options="paymentStatuses" :value="connection.paymentStatus" @update:value="connection.paymentStatus = $event"> </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('paymentMethodHelpText')" :label="tc('paymentMethodLabel')"> <template v-slot:content> <sw-entity-single-select :placeholder="tc('paymentMethodPlaceholder')" :value="connection.paymentMethod" entity="payment_method" @update:value="connection.paymentMethod = $event"> </sw-entity-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('shippingMethodHelpText')" :label="tc('shippingMethodLabel')"> <template v-slot:content> <sw-entity-single-select :placeholder="tc('shippingMethodPlaceholder')" :value="connection.shippingMethod" entity="shipping_method" @update:value="connection.shippingMethod = $event"> </sw-entity-single-select> </template> </sw-inherit-wrapper> <sw-switch-field bordered :label="tc('createCustomerLabel')" :helpText="tc('createCustomerHelpText')" :value="connection.createCustomer" @update:value="connection.createCustomer = $event" > </sw-switch-field> <sw-inherit-wrapper :helpText="tc('customerGroupHelpText')" :label="tc('customerGroupLabel')" v-show="connection.createCustomer"> <template v-slot:content> <sw-entity-single-select :placeholder="tc('customerGroupPlaceholder')" :value="connection.customerGroup" entity="customer_group" @update:value="connection.customerGroup = $event"> </sw-entity-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('customerSourceTypeHelpText')" :label="tc('customerSourceTypeLabel')" v-show="connection.createCustomer"> <template v-slot:content> <sw-single-select :placeholder="tc('customerSourceTypePlaceholder')" :options="customerSourceTypes" :value="connection.customerSourceType" @update:value="connection.customerSourceType = $event" > </sw-single-select> </template> </sw-inherit-wrapper> <sw-switch-field bordered :label="tc('importExternallyFulfilledOrdersLabel')" :helpText="tc('importExternallyFulfilledOrdersHelpText')" :value="connection.importExternallyFulfilledOrders" @update:value="connection.importExternallyFulfilledOrders = $event" > </sw-switch-field> <sw-inherit-wrapper :helpText="tc('externalPaymentStatusHelpText')" :label="tc('externalPaymentStatusLabel')" v-show="connection.importExternallyFulfilledOrders"> <template v-slot:content> <sw-single-select :placeholder="tc('externalPaymentStatusPlaceholder')" :options="paymentStatuses" :value="connection.externalPaymentStatus" @update:value="connection.externalPaymentStatus = $event"> </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('externalOrderStatusHelpText')" :label="tc('externalOrderStatusLabel')" v-show="connection.importExternallyFulfilledOrders"> <template v-slot:content> <sw-single-select :placeholder="tc('externalOrderStatusPlaceholder')" :options="orderStatuses" :value="connection.externalOrderStatus" @update:value="connection.externalOrderStatus = $event"> </sw-single-select> </template> </sw-inherit-wrapper> <sw-inherit-wrapper :helpText="tc('externalShippingStatusHelpText')" :label="tc('externalShippingStatusLabel')" v-show="connection.importExternallyFulfilledOrders"> <template v-slot:content> <sw-single-select :placeholder="tc('externalShippingStatusPlaceholder')" :options="shippingStatuses" :value="connection.externalShippingStatus" @update:value="connection.externalShippingStatus = $event"> </sw-single-select> </template> </sw-inherit-wrapper> </sw-card> </div> <sw-modal v-if="modal != null" @modal-close="modal.onCancel()"> <p>{{ modal.text }}</p> <template v-slot:modal-footer> <sw-button size="small" @click="modal.onCancel()"> {{ $tc('ec.global.cancel') }} </sw-button> <sw-button size="small" variant="danger" @click="modal.onConfirm()"> {{ $tc('ec.global.confirm') }} </sw-button> </template> </sw-modal> </template> </sw-page> {% endblock %}`,{Mixin:T}=Shopware;class k{constructor(e,n,l){this.text=e,this.onConfirm=n,this.onCancel=l}}Shopware.Component.register("effectconnect-connection-edit",{inject:["EffectConnectConnectionService","EffectConnectTaskService"],data(){return{toasts:[],modal:null,loaded:!1,busySaving:!1,id:this.$route.params.id,newItem:!1,salesChannels:[],availableSalesChannels:[],connection:null,schedules:[],stockTypes:[],paymentStatuses:[],orderStatuses:[],customerSourceTypes:[],shippingStatuses:[]}},mixins:[T.getByName("notification")],created(){this.loaded=!1,this.EffectConnectConnectionService.getSalesChannelData().then(t=>{this.initConnection(t).then(()=>{this.EffectConnectConnectionService.getOptions().then(e=>{e=e.data,this.schedules=this._toOptions("schedules",e.schedules),this.stockTypes=this._toOptions("stockTypes",e.stockTypes),this.paymentStatuses=this._toOptions("paymentStatuses",e.payment),this.orderStatuses=this._toOptions("orderStatuses",e.order),this.customerSourceTypes=this._toOptions("customerSourceTypes",e.customerSourceTypes),this.shippingStatuses=this._toOptions("shippingStatuses",e.shipping),this.loaded=!0})})}).catch(t=>this.handleError(t))},methods:{save(){console.log(this.connection);let t={name:"Name",salesChannelId:"Sales channel"};for(let e of Object.keys(t))if(!this.connection[e]){this.handleError(t[e]+" is required.");return}this.busySaving=!0,this.EffectConnectConnectionService.save(this.connection).then(e=>{this.newItem?(this.$router.push({name:"effectconnect.connection.edit",params:{id:e.id}}),window.location.reload()):this.createNotificationSuccess({message:this.$tc("ec.global.successSaved")})}).catch(e=>this.handleError(e)).finally(()=>this.busySaving=!1)},initConnection(t){return this.id?this.EffectConnectConnectionService.get(this.id).then(e=>{this.connection=e.connection,this.availableSalesChannels=t.data.filter(n=>n.value===this.connection.salesChannelId)}).catch(e=>this.handleError(e)):(this.newItem=!0,this.availableSalesChannels=t.data,this.EffectConnectConnectionService.getDefaultSettings().then(e=>{this.connection=e.data}).catch(e=>this.handleError(e)))},triggerCatalogExport(){this.modal=new k("Are you sure you want to trigger this process?",()=>{this.createNotificationSuccess({message:this.tc("taskTriggered")}),this.EffectConnectTaskService.trigger(this.connection.salesChannelId,"catalog"),this.modal=null},()=>{this.modal=null})},testApiCredentials(){return this.EffectConnectConnectionService.testApiCredentials(this.connection.publicKey,this.connection.secretKey).then(t=>{t.valid?this.createNotificationSuccess({message:this.tc("apiCredentialsOK")}):this.createNotificationError({message:this.tc("apiCredentialsNOK")})}).catch(t=>this.handleError(t))},handleError(t){this.createNotificationError({message:t})},tc(t){return this.$tc("ec.connection.edit."+t)},_toOption(t,e){return{value:e,label:this.tc(t+"."+e)}},_toOptions(t,e){return e.map(n=>this._toOption(t,n))}},template:C});Shopware.Module.register("effectconnect-connection",{type:"plugin",name:"effectconnect-connection",title:"ec.global.modules.connection.title",description:"ec.global.modules.connection.description",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",entity:"integration",snippets:{"nl-NL":v,"en-GB":y},routes:{overview:{component:"effectconnect-connection-overview",path:"overview"},edit:{component:"effectconnect-connection-edit",path:"edit/:id",meta:{parentPath:"effectconnect-connection.overview",parentRoute:"effectconnect-connection.overview"}},create:{component:"effectconnect-connection-edit",path:"create",meta:{parentPath:"effectconnect-connection.overview",parentRoute:"effectconnect-connection.overview"}}},navigation:[{id:"effectconnect-connection",label:"ec.global.modules.connection.label",color:"#ff3d58",path:"effectconnect.connection.overview",parent:"effectconnect-module",position:100}]});const L={log:{overview:{filename:"Bestandsnaam",lastUpdated:"Laatst bijgewerkt op",fullPath:"Bestandsnaam",download:"Downloaden"}}},E={ec:L},P={log:{overview:{filename:"Filename",lastUpdated:"Last updated at",fullPath:"Filename",download:"Download"}}},H={ec:P},O=`{% block log_overview %} <sw-page class="log-overview-list"> <template v-slot:smart-bar-actions> <sw-button v-show="shouldDisplayDownloadButton()" variant="primary" @click="downloadSelectedLogFiles()"> {{ tc('download') }} </sw-button> </template> <template v-slot:content> <div> <sw-data-grid ref="logGrid" :dataSource="files" :columns="columns" :itemIdentifierProperty="'fullPath'"> <template v-slot:actions="{ item }"> <sw-context-menu-item @click="downloadLogFile(item.fullPath)"> {{ tc('download') }} </sw-context-menu-item> </template> </sw-data-grid> </div> </template> </sw-page> {% endblock %}`;Shopware.Component.register("effectconnect-log-overview",{inject:["EffectConnectLogService"],data(){return{files:[],columns:[{property:"filename",label:this.tc("filename"),allowResize:!1},{property:"lastUpdated",label:this.tc("lastUpdated"),allowResize:!1},{property:"fullPath",label:this.tc("fullPath"),visible:!1},{property:"id",label:this.tc("id"),visible:!1}]}},created(){this.refresh()},methods:{tc(t){return this.$tc("ec.log.overview."+t)},refresh(){this.EffectConnectLogService.getAll().then(t=>{for(let e of t.files)this.files.push({id:e.path+"/"+e.filename,fullPath:e.path+"/"+e.filename,lastUpdated:new Date(e.lastUpdatedAt*1e3),filename:e.filename})})},shouldDisplayDownloadButton(){let t=this.$refs.logGrid;return(t?t.selectionCount:0)>1},downloadLogFile(t){let e=t.split("/"),n=e[e.length-1];this._downloadFiles(t,n)},downloadSelectedLogFiles(){let t=Object.values(this.$refs.logGrid.selection).map(e=>e.fullPath).join(",");this._downloadFiles(t,"EC-Logfiles "+new Date().toISOString()+".zip")},_downloadFiles(t,e){this.EffectConnectLogService.downloadFiles(t).then(n=>{const l=window.URL.createObjectURL(new Blob([n])),a=document.createElement("a");a.href=l,a.setAttribute("download",e),document.body.appendChild(a),a.click()})}},template:O});Shopware.Module.register("effectconnect-log",{type:"plugin",name:"effectconnect-log",title:"ec.global.modules.log.title",description:"ec.global.modules.log.description",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",entity:"integration",snippets:{"nl-NL":E,"en-GB":H},routes:{overview:{component:"effectconnect-log-overview",path:"overview"}},navigation:[{id:"effectconnect-log",label:"ec.global.modules.log.label",color:"#ff3d58",path:"effectconnect.log.overview",parent:"effectconnect-module",position:100}]});const i=Shopware.Classes.ApiService;class r extends i{constructor(e,n,l){super(e,n,"ec/action"),this.category=l}_getBaseUri(){return"ec/action"+(this.category?"/"+this.category:"")}getUri(e,n){let l=this._getBaseUri()+"/"+e;if(!n)return l;let a=Object.entries(n).map(([p,d])=>`${p}=${d}`);return l+"?"+a.join("&")}handleResponse(e){return i.handleResponse(e)}getData(e){let n=this.getBasicHeaders();return{...e,headers:n}}handlePromise(e){return e.then(n=>this.handleResponse(n))}getCall(e){return this.handlePromise(this.httpClient.get(this.getUri(e),this.getData({})))}postCall(e,n={}){return this.handlePromise(this.httpClient.post(this.getUri(e),n,this.getData({})))}}class F extends r{constructor(e,n){super(e,n,"connection")}getAll(){return this.getCall("getAll")}get(e){return this.getCall("get/"+e)}getSalesChannelData(){return this.getCall("getSalesChannelData")}getOptions(){return this.getCall("getOptions")}getDefaultSettings(){return this.getCall("getDefaultSettings")}delete(e){return this.postCall("delete/"+e)}save(e){return console.log(e),this.postCall("save",{connection:e})}testApiCredentials(e,n){return this.postCall("testApiCredentials",{publicKey:e,secretKey:n})}}class A extends r{constructor(e,n){super(e,n,"task")}trigger(e,n){return this.postCall("trigger/"+e+"/"+n)}}class $ extends r{constructor(e,n){super(e,n,"log")}downloadFiles(e){let n={responseType:"blob"};return this.handlePromise(this.httpClient.get(this.getUri("downloadFiles",{filenames:e}),this.getData(n)))}getAll(){return this.getCall("getAll")}}const{Application:s}=Shopware,o=s.getContainer("init");function I(){s.addServiceProvider("EffectConnectConnectionService",t=>new F(o.httpClient,t.loginService)),s.addServiceProvider("EffectConnectTaskService",t=>new A(o.httpClient,t.loginService)),s.addServiceProvider("EffectConnectLogService",t=>new $(o.httpClient,t.loginService))}I();
//# sourceMappingURL=effect-connect-marketplaces-Dc0E0DIh.js.map
